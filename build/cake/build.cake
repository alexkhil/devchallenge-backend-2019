///////////////////////////////////////////////////////////////////////////////
// ADDINS
///////////////////////////////////////////////////////////////////////////////
#addin Cake.Coveralls

///////////////////////////////////////////////////////////////////////////////
// TOOLS
///////////////////////////////////////////////////////////////////////////////
#tool coveralls.io

///////////////////////////////////////////////////////////////////////////////
// OTHER SCRIPTS
///////////////////////////////////////////////////////////////////////////////
#load Utils/paths.cake

///////////////////////////////////////////////////////////////////////////////
// ARGUMENTS
///////////////////////////////////////////////////////////////////////////////

var target = Argument<string>("Target", "Default");
var configuration = Argument<string>("Configuration", "Release");
var packageOutputPath = Argument<DirectoryPath>("PackageOutputPath", "packages");
var CoverallsToken = Argument<string>("Coveralls", "REPO_TOKEN");
var NuGetApiKey = Argument<string>("NugetApiKey", "NUGET_API_KEY");

var coverageFile = new FilePath($"../{Paths.Artifacts.FullPath}/coverage.opencover.xml");
var CoverallsPath = Argument<string>("CoverallsPath", coverageFile.FullPath);

///////////////////////////////////////////////////////////////////////////////
// TASKS
///////////////////////////////////////////////////////////////////////////////

#load Tasks/clean.cake
#load Tasks/create-nuget-package.cake
#load Tasks/restore-nuget-packages.cake
#load Tasks/publish-nuget-package.cake
#load Tasks/build.cake
#load Tasks/run-unit-tests.cake
#load Tasks/publish-coverage.cake
#load Tasks/default.cake

///////////////////////////////////////////////////////////////////////////////
// SETUP
///////////////////////////////////////////////////////////////////////////////

// Setup(ctx =>
// {
//    Information("Executed BEFORE the first task.");
// });

///////////////////////////////////////////////////////////////////////////////
// TEARDOWN
///////////////////////////////////////////////////////////////////////////////

// Teardown(ctx =>
// {
//   Information("Executed AFTER the last task.");
// });

RunTarget(target);